# -*- coding: utf-8 -*-
"""descriptive statistics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R9zjxoW0ryRT7vEQfLLnxQ-ujsIS8SH4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_excel('/content/file_example_XLS_10.xls')

data.head()

data.columns

data["Country"].value_counts()

"""BAR CHART"""

data["Country"].value_counts().plot(kind="bar")

"""PIE CHART"""

data["Country"].value_counts().plot(kind="pie", autopct = "%0.2f")

a = data["Country"].value_counts()

b = ((a/a.sum())*100).values

b

c = []
cf = 0
for i in b:
  cf = cf + i
  c.append(cf)

c

print(c)

plt.plot(c, marker="D")

"""NUMERICAL DATA

HISTOGRAM
"""

d = data["Age"].values
 plt.hist(d)

"""BOXPLOT"""

sns.boxplot(x = "Country", y = "Age", data=data)

sns.kdeplot(data["Age"])

sns.barplot(x = "Country", y = "Age", data=data)

"""SCATTER PLOT"""

m = data["Country"].values
N = data["Age"].values
plt.scatter(m,N)

e = pd.crosstab(data["Country"],data["Gender"])

e.plot(kind="bar")

"""HEATMAP"""

sns.heatmap(e)

"""IRIS DATASET"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

data = pd.read_csv("/content/Iris.csv")

data.head()

data.columns

data.rename(columns={"SepalLengthCm":"SL", "SepalWidthCm":"SW", "PetalLengthCm":"PL", "PetalWidthCm":"PW", "Species":"Sp"},inplace=True)



data.head()

data["Sp"].value_counts()

iris_setosa = data[data["Sp"]=="Iris-setosa"]
iris_versicolor = data[data["Sp"]=="Iris-versicolor"]
iris_virginica = data[data["Sp"]=="Iris-virginica"]

"""FINDING MEAN"""

#sepal length
print(np.mean(iris_setosa["SL"]))
print(np.mean(iris_versicolor["SL"]))
print(np.mean(iris_virginica["SL"]))

#SEPAL WIDTH
print(np.mean(iris_setosa["SW"]))
print(np.mean(iris_versicolor["SW"]))
print(np.mean(iris_virginica["SW"]))

#petal length
print(np.mean(iris_setosa["PL"]))
print(np.mean(iris_versicolor["PL"]))
print(np.mean(iris_virginica["PL"]))

#petal WIDTH
print(np.mean(iris_setosa["PW"]))
print(np.mean(iris_versicolor["PW"]))
print(np.mean(iris_virginica["PW"]))

"""***IF THE DATASET HAS AN OUTLIERS FINDING MEAN CANNOT PREDICT THE RANGE OF VALUES AS IT WILL SKEW IT TO ONE SIDE***

FINDING MEDIAN
"""

#sepal length
print(np.median(iris_setosa["SL"]))
print(np.median(iris_versicolor["SL"]))
print(np.median(iris_virginica["SL"]))

"""**WHAT IS GOOD ABOUT MEDIAN IS THAT IT DOESNT DEPEND ON OUTLIERS, THE MEDIAN REMAINS THE SAME**

MODE
"""

from scipy import stats
print(stats.mode(iris_setosa["SL"]))
print(stats.mode(iris_versicolor["SL"]))
print(stats.mode(iris_virginica["SL"]))

"""MEASURES OF SPREAD
It gives an idea of how the data is spread or varying

RANGE

it describes the difference between the maximum and minimum value of data
"""

#petal length
r = np.max(iris_setosa["PL"])-np.min(iris_setosa["PL"])

r

"""**PERCENTILE**
*It indicates the percentage below which the observations fall*
"""

np.percentile(iris_setosa["PL"], 95)

"""**QUARTILE** *It is the value at which the observation is divided into quarters*"""

print(np.percentile(iris_setosa["PL"],25))
print(np.percentile(iris_setosa["PL"],50))
print(np.percentile(iris_setosa["PL"],75))
print(np.percentile(iris_setosa["PL"],100))

"""**INTERQUARTILE RANGE** It is the difference between the upper(75th) and lower (25th) quartile"""

Q3 = np.percentile(iris_setosa["PL"],75)
Q1 = np.percentile(iris_setosa["PL"],25)
print(Q3-Q1)

"""## **VARIANCE** *The problem with variance is that it is not in the same unit as the data, for eg if the data is in cm then variance will be in sq cm, MAD is same as variance the difference is that inorder to get a positive number MAD takes mode(non smooth function) whereas Variance does squaring(smooth function)*"""



"""# **Standard deviation** It is the square root of variance, it is affected by outliers in data"""

print(np.std(iris_setosa["PL"]))

"""# **MEDIAN ABSOLUTE DEVIATION** *Not affected by outliers*"""

from statsmodels import robust
robust.mad(np.array([1,2,3,4,5,6,7,8]))

"""BOXPLOT
#minimum = Q1-1.5*IQR
#maximum = Q3+1.5*IQR
"""

sns.boxplot(iris_setosa["PL"])

sns.boxplot(x="Sp",y="PL",data=data)

sns.distplot(iris_setosa["PL"])

"""This curve is known as probability density function, it shows the points where the data is more densely concentrated"""

sns.FacetGrid(data, hue="Sp", height=4).map(sns.distplot,"PL").add_legend()

counts, bin_edges=np.histogram(iris_setosa["PL"], bins =10)
counts
bin_edges

pdf = counts/sum(counts)
cdf = np.cumsum(pdf)
print(pdf)
print(cdf)

plt.plot(bin_edges[1:],pdf)
plt.plot(bin_edges[1:],cdf)

"""# RANGE It is the difference between max and min value in a dataset"""